@サーバーがハブを務めるパターン
 
 (1)サーバーに接続する(ブロードキャスト)
 (2)サーバーにデータを送る
 (3)サーバーからデータを受け取る




fw::UDP_cliant net;
net.connect_server(port, data, limit_time);

while(main_loop)
{
	if(net.is_connecting_server())
	{
		show_connecting_animation();
		continue;
	}
	if(net.not_found_server())
	{
		process_when_not_found_server();
	}

	if(net.did_receive())
	{
		fw::Array<fw::Bindata> datas;
		datas.secure(net.num_received_messages());

		for(fw::uint i=0; i < net.num_received_messages(); ++i)
		{
			datas.add(net.received_message());
		}
		// todo
	}

	net.send(data);
	net.get_server_IP();
}







fw::UDP_server server;
server.start_server(port);

while(main_loop)
{
	if(server.did_receive())
	{
		for(fw::uint i=0; i < server.num_received_messages(); ++i)
		{
			fw::IP cliant_IP;
			fw::Bindata data = server.received_message(cliant_IP);
			if(is_request_connecting(data))
			{
				server.add_cliant(cliant_IP);
			}
			if(is_request_disconnecting(data))
			{
				server.remove_cliant(cliant_IP);
			}
		}
	}

	server.send_all(data);

	server.begin_enum_cliants();
	while(server.did_finish_enum() == false)
	{
		server.send_a_cliant(data);
	//	server.send_a_cliant(server.get_cliant_IP(), data);
		server.goto_next_cliant();
	}

#if 0
	// Deprecated
	for(fw::uint i=0; i < server.num_cliants(); ++i)
	{
		server.send(server.get_cliant_IP(i), data);
	//	server.send(i, data);	
	}
#endif
}






@サーバーとクライアントの両方をこなすパターン
 (1)自分の存在を他に知らせる(ブロードキャスト)
 (2)他からアプローチがあればクライアントとして記録する
 (3)送信・受信




 fw::UDP_hybrid net;
 net.start_server(port);
 net.request_connecting_to_all(data);

 while(main_loop)
 {
	if(net.did_receive())
	{
		for(fw::uint i=0; i < net.num_received_messages(); ++i)
		{
			fw::IP cliant_IP;
			fw::Bindata data = net.received_message(cliant_IP);
			if(is_request_connecting(data))
			{
				net.add_cliant(cliant_IP);
			}
			if(is_request_disconnecting(data))
			{
				net.remove_cliant(cliant_IP);
			}
		}
	}
	
	net.send_all(data);

	net.begin_enum_cliants();
	while(net.did_finish_enum() == false)
	{
		net.send_a_cliant(data);
	//	net.send_a_cliant(net.get_cliant_IP(), data);
		net.goto_next_cliant();
	}

#if 0
	// Deprecated
	for(fw::uint i=0; i < net.num_cliants(); ++i)
	{
		net.send(net.get_cliant_IP(i), data);
	//	net.send(i, data);	
	}
#endif
 }